{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Types\n\n// API Functions\nexport const storyApi = {\n  // Stories\n  getStories: async () => {\n    const response = await api.get('/api/v1/stories/');\n    return response.data;\n  },\n  getStory: async id => {\n    const response = await api.get(`/api/v1/stories/${id}`);\n    return response.data;\n  },\n  createStory: async data => {\n    const response = await api.post('/api/v1/stories/', data);\n    return response.data;\n  },\n  updateStory: async (id, data) => {\n    const response = await api.put(`/api/v1/stories/${id}`, data);\n    return response.data;\n  },\n  deleteStory: async id => {\n    await api.delete(`/api/v1/stories/${id}`);\n  },\n  // Chapters\n  getChapter: async (storyId, chapterNumber) => {\n    const response = await api.get(`/api/v1/stories/${storyId}/chapters/${chapterNumber}`);\n    return response.data;\n  },\n  updateChapter: async (storyId, chapterNumber, data) => {\n    const response = await api.put(`/api/v1/stories/${storyId}/chapters/${chapterNumber}`, data);\n    return response.data;\n  },\n  // Characters\n  getCharacters: async storyId => {\n    const response = await api.get(`/api/v1/characters/story/${storyId}`);\n    return response.data;\n  },\n  createCharacter: async (storyId, data) => {\n    const response = await api.post(`/api/v1/characters/story/${storyId}`, data);\n    return response.data;\n  },\n  updateCharacter: async (characterId, data) => {\n    const response = await api.put(`/api/v1/characters/${characterId}`, data);\n    return response.data;\n  },\n  deleteCharacter: async characterId => {\n    await api.delete(`/api/v1/characters/${characterId}`);\n  },\n  // World Elements\n  getWorldElements: async storyId => {\n    const response = await api.get(`/api/v1/world/story/${storyId}`);\n    return response.data;\n  },\n  createWorldElement: async (storyId, data) => {\n    const response = await api.post(`/api/v1/world/story/${storyId}`, data);\n    return response.data;\n  },\n  updateWorldElement: async (elementId, data) => {\n    const response = await api.put(`/api/v1/world/${elementId}`, data);\n    return response.data;\n  },\n  deleteWorldElement: async elementId => {\n    await api.delete(`/api/v1/world/${elementId}`);\n  }\n};\nexport const generationApi = {\n  // Generate outline\n  generateOutline: async (storyId, data) => {\n    const response = await api.post(`/api/v1/generate/stories/${storyId}/outline`, data);\n    return response.data;\n  },\n  // Generate chapter\n  generateChapter: async (storyId, chapterNumber, customPrompt) => {\n    const response = await api.post(`/api/v1/generate/stories/${storyId}/chapters/${chapterNumber}`, {\n      custom_prompt: customPrompt\n    });\n    return response.data;\n  },\n  // Generate characters\n  generateCharacters: async (storyId, data) => {\n    const response = await api.post(`/api/v1/generate/stories/${storyId}/characters`, data);\n    return response.data;\n  },\n  // Check AI provider status\n  getProviderStatus: async () => {\n    const response = await api.get('/api/v1/generate/providers/status');\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","storyApi","getStories","response","get","data","getStory","id","createStory","post","updateStory","put","deleteStory","delete","getChapter","storyId","chapterNumber","updateChapter","getCharacters","createCharacter","updateCharacter","characterId","deleteCharacter","getWorldElements","createWorldElement","updateWorldElement","elementId","deleteWorldElement","generationApi","generateOutline","generateChapter","customPrompt","custom_prompt","generateCharacters","getProviderStatus"],"sources":["/Users/jamesfletty/finalbook/ai_novel_app/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Types\nexport interface Story {\n  story_id: number;\n  title: string;\n  description?: string;\n  genre?: string;\n  target_word_count: number;\n  target_chapters: number;\n  created_at: string;\n  updated_at?: string;\n  acts?: Act[];\n  chapters?: Chapter[];\n  character_count?: number;\n  world_element_count?: number;\n  total_word_count?: number;\n}\n\nexport interface Act {\n  act_id: number;\n  number: number;\n  title?: string;\n  summary?: string;\n}\n\nexport interface Chapter {\n  chapter_id: number;\n  number: number;\n  title?: string;\n  summary?: string;\n  content?: string;\n  is_generated: boolean;\n  is_approved: boolean;\n  word_count: number;\n  act_id?: number;\n  created_at: string;\n  updated_at?: string;\n}\n\nexport interface Character {\n  character_id: number;\n  story_id: number;\n  name: string;\n  role?: string;\n  profile?: string;\n  traits?: any;\n  arc?: string;\n  appearance?: string;\n  personality?: string;\n  background?: string;\n  motivations?: string;\n}\n\nexport interface WorldElement {\n  element_id: number;\n  story_id: number;\n  type: string;\n  name: string;\n  description?: string;\n  meta?: any;\n  category?: string;\n  importance?: string;\n}\n\nexport interface CreateStoryRequest {\n  title: string;\n  description?: string;\n  genre?: string;\n  target_chapters?: number;\n  target_word_count?: number;\n}\n\nexport interface GenerateOutlineRequest {\n  target_chapters?: number;\n  custom_prompt?: string;\n}\n\nexport interface GenerateCharactersRequest {\n  character_count?: number;\n  custom_prompt?: string;\n}\n\n// API Functions\nexport const storyApi = {\n  // Stories\n  getStories: async (): Promise<Story[]> => {\n    const response = await api.get('/api/v1/stories/');\n    return response.data;\n  },\n\n  getStory: async (id: number): Promise<Story> => {\n    const response = await api.get(`/api/v1/stories/${id}`);\n    return response.data;\n  },\n\n  createStory: async (data: CreateStoryRequest): Promise<Story> => {\n    const response = await api.post('/api/v1/stories/', data);\n    return response.data;\n  },\n\n  updateStory: async (id: number, data: Partial<CreateStoryRequest>): Promise<Story> => {\n    const response = await api.put(`/api/v1/stories/${id}`, data);\n    return response.data;\n  },\n\n  deleteStory: async (id: number): Promise<void> => {\n    await api.delete(`/api/v1/stories/${id}`);\n  },\n\n  // Chapters\n  getChapter: async (storyId: number, chapterNumber: number): Promise<Chapter> => {\n    const response = await api.get(`/api/v1/stories/${storyId}/chapters/${chapterNumber}`);\n    return response.data;\n  },\n\n  updateChapter: async (storyId: number, chapterNumber: number, data: Partial<Chapter>): Promise<Chapter> => {\n    const response = await api.put(`/api/v1/stories/${storyId}/chapters/${chapterNumber}`, data);\n    return response.data;\n  },\n\n  // Characters\n  getCharacters: async (storyId: number): Promise<Character[]> => {\n    const response = await api.get(`/api/v1/characters/story/${storyId}`);\n    return response.data;\n  },\n\n  createCharacter: async (storyId: number, data: Omit<Character, 'character_id' | 'story_id'>): Promise<Character> => {\n    const response = await api.post(`/api/v1/characters/story/${storyId}`, data);\n    return response.data;\n  },\n\n  updateCharacter: async (characterId: number, data: Partial<Character>): Promise<Character> => {\n    const response = await api.put(`/api/v1/characters/${characterId}`, data);\n    return response.data;\n  },\n\n  deleteCharacter: async (characterId: number): Promise<void> => {\n    await api.delete(`/api/v1/characters/${characterId}`);\n  },\n\n  // World Elements\n  getWorldElements: async (storyId: number): Promise<WorldElement[]> => {\n    const response = await api.get(`/api/v1/world/story/${storyId}`);\n    return response.data;\n  },\n\n  createWorldElement: async (storyId: number, data: Omit<WorldElement, 'element_id' | 'story_id'>): Promise<WorldElement> => {\n    const response = await api.post(`/api/v1/world/story/${storyId}`, data);\n    return response.data;\n  },\n\n  updateWorldElement: async (elementId: number, data: Partial<WorldElement>): Promise<WorldElement> => {\n    const response = await api.put(`/api/v1/world/${elementId}`, data);\n    return response.data;\n  },\n\n  deleteWorldElement: async (elementId: number): Promise<void> => {\n    await api.delete(`/api/v1/world/${elementId}`);\n  },\n};\n\nexport const generationApi = {\n  // Generate outline\n  generateOutline: async (storyId: number, data: GenerateOutlineRequest): Promise<any> => {\n    const response = await api.post(`/api/v1/generate/stories/${storyId}/outline`, data);\n    return response.data;\n  },\n\n  // Generate chapter\n  generateChapter: async (storyId: number, chapterNumber: number, customPrompt?: string): Promise<any> => {\n    const response = await api.post(`/api/v1/generate/stories/${storyId}/chapters/${chapterNumber}`, {\n      custom_prompt: customPrompt,\n    });\n    return response.data;\n  },\n\n  // Generate characters\n  generateCharacters: async (storyId: number, data: GenerateCharactersRequest): Promise<any> => {\n    const response = await api.post(`/api/v1/generate/stories/${storyId}/characters`, data);\n    return response.data;\n  },\n\n  // Check AI provider status\n  getProviderStatus: async (): Promise<any> => {\n    const response = await api.get('/api/v1/generate/providers/status');\n    return response.data;\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}