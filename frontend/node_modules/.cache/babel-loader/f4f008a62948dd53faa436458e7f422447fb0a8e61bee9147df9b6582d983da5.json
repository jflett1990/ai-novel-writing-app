{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor for debugging\napi.interceptors.request.use(config => {\n  console.log('Making API request:', {\n    method: config.method,\n    url: config.url,\n    baseURL: config.baseURL,\n    fullURL: `${config.baseURL}${config.url}`,\n    data: config.data\n  });\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Add response interceptor for debugging\napi.interceptors.response.use(response => {\n  console.log('API response:', {\n    status: response.status,\n    data: response.data\n  });\n  return response;\n}, error => {\n  console.error('Response error:', {\n    message: error.message,\n    code: error.code,\n    config: error.config,\n    response: error.response\n  });\n  return Promise.reject(error);\n});\n\n// Types\n\n// API Functions\nexport const storyApi = {\n  // Stories\n  getStories: async () => {\n    const response = await api.get('/api/v1/stories/');\n    return response.data;\n  },\n  getStory: async id => {\n    const response = await api.get(`/api/v1/stories/${id}`);\n    return response.data;\n  },\n  createStory: async data => {\n    const response = await api.post('/api/v1/stories/', data);\n    return response.data;\n  },\n  updateStory: async (id, data) => {\n    const response = await api.put(`/api/v1/stories/${id}`, data);\n    return response.data;\n  },\n  deleteStory: async id => {\n    await api.delete(`/api/v1/stories/${id}`);\n  },\n  // Chapters\n  getChapter: async (storyId, chapterNumber) => {\n    const response = await api.get(`/api/v1/stories/${storyId}/chapters/${chapterNumber}`);\n    return response.data;\n  },\n  updateChapter: async (storyId, chapterNumber, data) => {\n    const response = await api.put(`/api/v1/stories/${storyId}/chapters/${chapterNumber}`, data);\n    return response.data;\n  },\n  // Characters\n  getCharacters: async storyId => {\n    const response = await api.get(`/api/v1/characters/story/${storyId}`);\n    return response.data;\n  },\n  createCharacter: async (storyId, data) => {\n    const response = await api.post(`/api/v1/characters/story/${storyId}`, data);\n    return response.data;\n  },\n  updateCharacter: async (characterId, data) => {\n    const response = await api.put(`/api/v1/characters/${characterId}`, data);\n    return response.data;\n  },\n  deleteCharacter: async characterId => {\n    await api.delete(`/api/v1/characters/${characterId}`);\n  },\n  // World Elements\n  getWorldElements: async storyId => {\n    const response = await api.get(`/api/v1/world/story/${storyId}`);\n    return response.data;\n  },\n  createWorldElement: async (storyId, data) => {\n    const response = await api.post(`/api/v1/world/story/${storyId}`, data);\n    return response.data;\n  },\n  updateWorldElement: async (elementId, data) => {\n    const response = await api.put(`/api/v1/world/${elementId}`, data);\n    return response.data;\n  },\n  deleteWorldElement: async elementId => {\n    await api.delete(`/api/v1/world/${elementId}`);\n  }\n};\nexport const generationApi = {\n  // Generate outline\n  generateOutline: async (storyId, data) => {\n    const response = await api.post(`/api/v1/generate/stories/${storyId}/outline`, data);\n    return response.data;\n  },\n  // Generate chapter\n  generateChapter: async (storyId, chapterNumber, customPrompt) => {\n    const response = await api.post(`/api/v1/generate/stories/${storyId}/chapters/${chapterNumber}`, {\n      custom_prompt: customPrompt\n    });\n    return response.data;\n  },\n  // Generate characters\n  generateCharacters: async (storyId, data) => {\n    const response = await api.post(`/api/v1/generate/stories/${storyId}/characters`, data);\n    return response.data;\n  },\n  // Generate world elements\n  generateWorldElements: async (storyId, elementCount = 8) => {\n    const response = await api.post(`/api/v1/generate/stories/${storyId}/world?element_count=${elementCount}`);\n    return response.data;\n  },\n  // Check AI provider status\n  getProviderStatus: async () => {\n    const response = await api.get('/api/v1/generate/providers/status');\n    return response.data;\n  },\n  // Get complexity setting\n  getComplexity: async () => {\n    const response = await api.get('/api/v1/generate/complexity');\n    return response.data;\n  },\n  // Set complexity level\n  setComplexity: async level => {\n    const response = await api.post(`/api/v1/generate/complexity/${level}`);\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","console","log","method","url","fullURL","data","error","Promise","reject","response","status","message","code","storyApi","getStories","get","getStory","id","createStory","post","updateStory","put","deleteStory","delete","getChapter","storyId","chapterNumber","updateChapter","getCharacters","createCharacter","updateCharacter","characterId","deleteCharacter","getWorldElements","createWorldElement","updateWorldElement","elementId","deleteWorldElement","generationApi","generateOutline","generateChapter","customPrompt","custom_prompt","generateCharacters","generateWorldElements","elementCount","getProviderStatus","getComplexity","setComplexity","level"],"sources":["/Users/jamesfletty/finalbook/ai_novel_app/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor for debugging\napi.interceptors.request.use(\n  (config) => {\n    console.log('Making API request:', {\n      method: config.method,\n      url: config.url,\n      baseURL: config.baseURL,\n      fullURL: `${config.baseURL}${config.url}`,\n      data: config.data,\n    });\n    return config;\n  },\n  (error) => {\n    console.error('Request error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor for debugging\napi.interceptors.response.use(\n  (response) => {\n    console.log('API response:', {\n      status: response.status,\n      data: response.data,\n    });\n    return response;\n  },\n  (error) => {\n    console.error('Response error:', {\n      message: error.message,\n      code: error.code,\n      config: error.config,\n      response: error.response,\n    });\n    return Promise.reject(error);\n  }\n);\n\n// Types\nexport interface Story {\n  story_id: number;\n  title: string;\n  description?: string;\n  genre?: string;\n  target_word_count: number;\n  target_chapters: number;\n  created_at: string;\n  updated_at?: string;\n  acts?: Act[];\n  chapters?: Chapter[];\n  character_count?: number;\n  world_element_count?: number;\n  total_word_count?: number;\n}\n\nexport interface Act {\n  act_id: number;\n  number: number;\n  title?: string;\n  summary?: string;\n}\n\nexport interface Chapter {\n  chapter_id: number;\n  number: number;\n  title?: string;\n  summary?: string;\n  content?: string;\n  is_generated: boolean;\n  is_approved: boolean;\n  word_count: number;\n  act_id?: number;\n  created_at: string;\n  updated_at?: string;\n}\n\nexport interface Character {\n  character_id: number;\n  story_id: number;\n  name: string;\n  role?: string;\n  profile?: string;\n  traits?: any;\n  arc?: string;\n  appearance?: string;\n  personality?: string;\n  background?: string;\n  motivations?: string;\n}\n\nexport interface WorldElement {\n  element_id: number;\n  story_id: number;\n  type: string;\n  name: string;\n  description?: string;\n  meta?: any;\n  category?: string;\n  importance?: string;\n}\n\nexport interface CreateStoryRequest {\n  title: string;\n  description?: string;\n  genre?: string;\n  target_chapters?: number;\n  target_word_count?: number;\n}\n\nexport interface GenerateOutlineRequest {\n  target_chapters?: number;\n  custom_prompt?: string;\n}\n\nexport interface GenerateCharactersRequest {\n  character_count?: number;\n  custom_prompt?: string;\n}\n\n// API Functions\nexport const storyApi = {\n  // Stories\n  getStories: async (): Promise<Story[]> => {\n    const response = await api.get('/api/v1/stories/');\n    return response.data;\n  },\n\n  getStory: async (id: number): Promise<Story> => {\n    const response = await api.get(`/api/v1/stories/${id}`);\n    return response.data;\n  },\n\n  createStory: async (data: CreateStoryRequest): Promise<Story> => {\n    const response = await api.post('/api/v1/stories/', data);\n    return response.data;\n  },\n\n  updateStory: async (id: number, data: Partial<CreateStoryRequest>): Promise<Story> => {\n    const response = await api.put(`/api/v1/stories/${id}`, data);\n    return response.data;\n  },\n\n  deleteStory: async (id: number): Promise<void> => {\n    await api.delete(`/api/v1/stories/${id}`);\n  },\n\n  // Chapters\n  getChapter: async (storyId: number, chapterNumber: number): Promise<Chapter> => {\n    const response = await api.get(`/api/v1/stories/${storyId}/chapters/${chapterNumber}`);\n    return response.data;\n  },\n\n  updateChapter: async (storyId: number, chapterNumber: number, data: Partial<Chapter>): Promise<Chapter> => {\n    const response = await api.put(`/api/v1/stories/${storyId}/chapters/${chapterNumber}`, data);\n    return response.data;\n  },\n\n  // Characters\n  getCharacters: async (storyId: number): Promise<Character[]> => {\n    const response = await api.get(`/api/v1/characters/story/${storyId}`);\n    return response.data;\n  },\n\n  createCharacter: async (storyId: number, data: Omit<Character, 'character_id' | 'story_id'>): Promise<Character> => {\n    const response = await api.post(`/api/v1/characters/story/${storyId}`, data);\n    return response.data;\n  },\n\n  updateCharacter: async (characterId: number, data: Partial<Character>): Promise<Character> => {\n    const response = await api.put(`/api/v1/characters/${characterId}`, data);\n    return response.data;\n  },\n\n  deleteCharacter: async (characterId: number): Promise<void> => {\n    await api.delete(`/api/v1/characters/${characterId}`);\n  },\n\n  // World Elements\n  getWorldElements: async (storyId: number): Promise<WorldElement[]> => {\n    const response = await api.get(`/api/v1/world/story/${storyId}`);\n    return response.data;\n  },\n\n  createWorldElement: async (storyId: number, data: Omit<WorldElement, 'element_id' | 'story_id'>): Promise<WorldElement> => {\n    const response = await api.post(`/api/v1/world/story/${storyId}`, data);\n    return response.data;\n  },\n\n  updateWorldElement: async (elementId: number, data: Partial<WorldElement>): Promise<WorldElement> => {\n    const response = await api.put(`/api/v1/world/${elementId}`, data);\n    return response.data;\n  },\n\n  deleteWorldElement: async (elementId: number): Promise<void> => {\n    await api.delete(`/api/v1/world/${elementId}`);\n  },\n};\n\nexport const generationApi = {\n  // Generate outline\n  generateOutline: async (storyId: number, data: GenerateOutlineRequest): Promise<any> => {\n    const response = await api.post(`/api/v1/generate/stories/${storyId}/outline`, data);\n    return response.data;\n  },\n\n  // Generate chapter\n  generateChapter: async (storyId: number, chapterNumber: number, customPrompt?: string): Promise<any> => {\n    const response = await api.post(`/api/v1/generate/stories/${storyId}/chapters/${chapterNumber}`, {\n      custom_prompt: customPrompt,\n    });\n    return response.data;\n  },\n\n  // Generate characters\n  generateCharacters: async (storyId: number, data: GenerateCharactersRequest): Promise<any> => {\n    const response = await api.post(`/api/v1/generate/stories/${storyId}/characters`, data);\n    return response.data;\n  },\n\n  // Generate world elements\n  generateWorldElements: async (storyId: number, elementCount: number = 8): Promise<any> => {\n    const response = await api.post(`/api/v1/generate/stories/${storyId}/world?element_count=${elementCount}`);\n    return response.data;\n  },\n\n  // Check AI provider status\n  getProviderStatus: async (): Promise<any> => {\n    const response = await api.get('/api/v1/generate/providers/status');\n    return response.data;\n  },\n\n  // Get complexity setting\n  getComplexity: async (): Promise<any> => {\n    const response = await api.get('/api/v1/generate/complexity');\n    return response.data;\n  },\n\n  // Set complexity level\n  setComplexity: async (level: string): Promise<any> => {\n    const response = await api.post(`/api/v1/generate/complexity/${level}`);\n    return response.data;\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}